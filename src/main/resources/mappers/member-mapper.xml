<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-/mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	<!-- Join -->
	<insert id="insertMember" parameterType="Member">
		insert into member
		values(
			#{userId},
			#{password},
			#{nickName},
			#{email},
			#{address},
			#{phone},
			sysdate,
			sysdate,
			default,
			#{userName}
		)
		
		
	</insert>
	
	<!-- Login -->
	<select id="loginMember" parameterType="string" resultType="Member">
		select *
		from member
		where userId=#{userId} and status='Y'
	</select>
	
	<select id="selectMemberList" resultType="Member" resultMap="memberResultSet">
		select *
		from memberlist
		where status ='Y'
		</select>
	<select id="selectMemberList2" resultType="Member" resultMap="memberResultSet">
		select *
		from memberlist
		where status ='Y'
		
		<!--2) choose,when,otherwise  -->
  	

  			<if test="searchForm.equals('allSearch')">
  			
  			and (nickname like '%' || #{searchInput} || '%' or userid like '%' || #{searchInput} || '%'  or username like '%'|| #{searchInput} || '%')
			
		
  			
  			</if>
  			
  			<if test="searchForm.equals('Paynum')">
  			
  			and userid like '%'||  #{searchInput}|| '%'
  			
  			</if>
  			
  			<if test="searchForm.equals('PayName')">
  			
  			and username like '%' || #{searchInput} || '%'
  			
  			</if>
  		
  			<if test="searchForm.equals('PayNickName')">
  			and nickname like '%' || #{searchInput} || '%'
  			
  			</if>
  			
  			  			
  			<if test="startDatePicker!=''">
  				
  			and enroll_Date between '${startDatePicker}' and  to_date('${endDatePicker}')+1
  			</if> 
  

  				
  		<!-- <otherwise>
  		 and bcontent like '%' || #{content} || '%'
  		</otherwise>  -->
  	

	</select>
	
	
		<resultMap type="Member" id="memberResultSet">
		<id property="userId" column="USERID"/>
		<result property="password" column="PASSWORD"/>
		<result property="userName" column="USERNAME"/>
		<result property="email" column="EMAIL"/>
		<result property="nickName" column="NICKNAME"/>
		<result property="age" column="age"/>
		<result property="phone" column="PHONE"/>
		<result property="address" column="ADDRESS"/>
		<result property="enroll_Date" column="ENROLL_DATE"/>
		<result property="modify_Date" column="MODIFY_DATE"/>
		<result property="status" column="STATUS"/>
		<result property="mNum" column="RNUM"/>

	
	
	</resultMap>
	
	
	<select id="selectListCount" resultType="_int">
		select count(*)
		from memberlist
		where status ='Y'
	
	 
	</select>
	
	<!-- 탈퇴회원조회 -->
	<select id="selectMemberSecession" resultType="Member" resultMap="memberResultSet">
	
		select *
		from memberlist
		where status ='N'
		
		<!--2) choose,when,otherwise  -->
  	
  	<choose>
  		<when test="searchInput !=''">
  			<if test="searchForm.equals('allSearch')">
  			
  			and (nickname like '%' || #{searchInput} || '%' or userid like '%' || #{searchInput} || '%'  or username like '%'|| #{searchInput} || '%')
			
		
  			
  			</if>
  			
  			<if test="searchForm.equals('Paynum')">
  			
  			and userid like '%'||  #{searchInput}|| '%'
  			
  			</if>
  			
  			<if test="searchForm.equals('PayName')">
  			
  			and username like '%' || #{searchInput} || '%'
  			
  			</if>
  		
  			<if test="searchForm.equals('PayNickName')">
  			and nickname like '%' || #{searchInput} || '%'
  			
  			</if>
  			
  			
  			</when>
  			
  			<when test="startDatePicker!=''">
  				
  			and enroll_Date between '${startDatePicker}' and  to_date('${endDatePicker}')+1
  			</when> 
  				
  		<!-- <otherwise>
  		 and bcontent like '%' || #{content} || '%'
  		</otherwise>  -->
  	
  	</choose>
	
	
	</select>
	
		<select id="selectMemberSecession2" resultType="Member" resultMap="memberResultSet">
		select *
		from memberlist
		where status ='N'
		</select>


	<!-- 관리자 관점 회원 탈퇴 -->
	<update id="deleteMemAdmin"  parameterType="string">
	
	update member
	set status ='B'
	where userid = #{memId}
	
	</update>
	
	<!-- 회원 관점 탈퇴 -->
	<update id="deleteMember" parameterType="string">
		update member
		set status = 'N'
		where userId = #{userId}
	</update>
	


	<select id="blackMemberList"  resultType="Member" resultMap="memberResultSet">
	
	select *
	from memberlist
	where status ='B'
	
	</select>
	
	<select id ="blackMemberSearch" resultType="Member" resultMap="memberResultSet">
		select *
		from memberlist
		where status ='B'
		
		<!--2) choose,when,otherwise  -->
  	

  			<if test="searchForm.equals('allSearch')">
  			
  			and (nickname like '%' || #{searchInput} || '%' or userid like '%' || #{searchInput} || '%'  or username like '%'|| #{searchInput} || '%')
			
		
  			
  			</if>
  			
  			<if test="searchForm.equals('Paynum')">
  			
  			and userid like '%'||  #{searchInput}|| '%'
  			
  			</if>
  			
  			<if test="searchForm.equals('PayName')">
  			
  			and username like '%' || #{searchInput} || '%'
  			
  			</if>
  		
  			<if test="searchForm.equals('PayNickName')">
  			and nickname like '%' || #{searchInput} || '%'
  			
  			</if>
  			
  			
  	
  			
  			<if test="startDatePicker!=''">
  				
  			and enroll_Date between '${startDatePicker}' and  to_date('${endDatePicker}')+1
  			</if> 
  				
  		<!-- <otherwise>
  		 and bcontent like '%' || #{content} || '%'
  		</otherwise>  -->
  	

	
	
	
	</select>
	
	
	<update id="BlackListCancel" parameterType="String">
	
	update member
	set status ='Y'
	where userid = #{memId}
	
	</update>
	
	<update id="updatePwd" parameterType="Member">
		update member
		set password=#{password}
		where userId=#{userId}
	</update>
	
	<select id="checkId" parameterType="string" resultType="_int">
		select count(*)
		from member
		where userId = #{userId} and status = 'Y'
	</select>
	
	<select id="checkNick" parameterType="string" resultType="_int">
		select count(*)
		from member
		where nickName = #{nickName} and status = 'Y'
	</select>
	
	<update id="memberUpdate">
		update member
		set nickName=#{nickName}, phone=#{phone}, 
			email=#{email},  address=#{address}, MODIFY_DATE=SYSDATE
		where userId=#{userId}
	</update>
	
	<select id="findId" parameterType="Member" resultType="String">
		select userId
    	from member
    	where userName=#{userName} and email=#{email}
	</select>
	
	<update id="findPass" >
		update member
    	set password = #{password}
    	where userId=#{userId} and email=#{email}
	</update>
	
	<select id="getListCount" resultType="_int">
		select count(*)
		from notice
		where status = 'Y'
	</select>
	
	<resultMap type="lbotm" id="lbotmResultSet">
		<id property="bNo" column="BNO"/>
		<result property="pt_Id" column="PT_ID"/>
		<result property="userId" column="USERID" />
		<result property="b_Title" column="B_TITLE" />
		<result property="b_Content" column="B_CONTENT" />
		<result property="b_Nickname" column="B_NICKNAME" />
		<result property="b_Createdate" column="B_CREATEDATE" />
		<result property="bModifydate" column="BMODIFYDATE" />
		<result property="b_Count" column="B_COUNT" />
		<result property="ct_Id" column="CT_ID" />
		<result property="b_Src" column="B_SRC" />
		<result property="b_Status" column="B_STATUS" />
		
		<result property="files_no" column="FILES_NO" />
		<result property="f_reference_no" column="F_REFERENCE_NO" />
		<result property="files_title" column="FILES_TITLE" />
		<result property="files_change_title" column="FILES_CHANGE_TITLE" />
		<result property="files_type" column="FILES_TYPE" />
		<result property="files_root" column="FILES_ROOT" />
		<result property="files_secession" column="FILES_SECESSION" />
	</resultMap>
	
	<select id="selectList" resultMap="lbotmResultSet">
		select *
		from LBOTM
		where B_STATUS = 'Y' and USERID = #{userId}
		order by bno desc
	</select>
	
	<select id="myPaymentList" parameterType="string" resultType="Payment">
		select *
		from payment
		where USERID=#{userId}
		order by payno
	</select>
	
	<select id="getPaymentList" parameterType="string" resultType="_int">
		select count(*)
		from payment
		where userid=#{userId}
	</select>
	
	<select id="myPaymentDetailList" parameterType="string" resultType="Payment">
		select *
		from payment
		where p_id=#{p_id}
	</select>
	
	<select id="getMyBoardList" parameterType="string" resultType="_int">
		select count(*)
		from LBOTM
		where userid = #{userID} and B_STATUS = 'Y'
	</select>
	
	<select id="getMyQnAList" parameterType="string" resultType="_int">
		select count(*)
		from PRODUCTQNA
		where QNA_USER = #{QNA_USER}
	</select>
	
	<select id="selectQnAList" parameterType="string" resultType="Payment">
		select *
		from PRODUCTQNA
		where USERID=#{userId}
		order by QNA_NO
	</select>	
		
	</mapper>